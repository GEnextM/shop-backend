service: queue-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: "sqs:*"
          Resource: 
            - Fn::GetAtt: [ SQSQueue, Arn]
        - Effect: "Allow"
          Action: "sns:*"
          Resource: 
            Ref: SNSTopic
  
#   environment:
#     SQS_URL:
#       Ref: SQSQueue
#     SNS_ARN:
#       Ref: SNSTopic

# resources:
#   Resources:
#     SQSQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: sns-sqs-queue
#     SNSTopic:
#       Type: AWS::SNS::Topic
#       Properties:
#         TopicName: sqs-sns-topic
#     SNSSubscription:
#       Type: AWS::SNS::Subscription
#       Properties:
#         Endpoint: genexter@mail.ru
#         Protocol: email
#         TopicArn:
#           Ref: SNSTopic

  

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: "arn:aws:s3:::import-service-genext"
#    - Effect: "Allow"
#      Action:
#        - "s3:*"
#      Resource: "arn:aws:s3:::import-service-genext/*"
#            - "/*"

# you can define service wide environment variables here

  # environment:
  #   PG_HOST: ${env:PG_HOST}
  #   PG_PORT: ${env:PG_PORT}
  #   PG_DATABASE: ${env:PG_DATABASE}
  #   PG_USERNAME: ${env:PG_USERNAME}
  #   PG_PASSWORD: ${env:PG_PASSWORD}

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

  

functions:
    # usersSubmit:
    #   handler: handler.usersSubmit
    #   events:
    #     - http:
    #         path: users
    #         method: post
    # catalogItemsQueue:
    #   handler: handler.catalogItemsQueue
    #   events:
    #     - sqs:
    #         batchSize: 1
    #         arn:
    #           Fn::GetAtt:
    #             - SQSQueue
    #             - Arn
            
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
